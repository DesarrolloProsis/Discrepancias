@model NuevoFormatoDiscrepancias.Models.Graficas

@{
    ViewBag.Title = "CreacionDeGrafica";

}

<script>
    $(window).resize(function () {
        kendo.resize($("div.k-chart[data-role='chart']"));
    });
</script>


<div>

                                        @(Html.Kendo().Chart()
                                        .Name("chart")
                                        .Title("Discrepancias Totales")
                                        .HtmlAttributes(new { style="margin-top:100px !important;" })
                                        .Legend(legend => legend
                                        .Position(ChartLegendPosition.Left)
                                        )
                                        .ChartArea(chartArea => chartArea
                                        .Background("transparent")
                                        )
                                        //.SeriesDefaults(seriesDefaults =>
                                        //seriesDefaults.Line().Style(ChartLineStyle.Smooth)
                                        //)
                                        .Series(series =>
                                        {
                                            if (Model.Datos_Totales_Pre != null)
                                            {
                                                for (int i = 0; i < Model.Carriles.Count; i++)
                                                {
                                                    series.Column(new double[] { Model.Datos_Totales_Pre[i, 0], Model.Datos_Totales_Pre[i, 1], Model.Datos_Totales_Pre[i, 2], Model.Datos_Totales_Pre[i, 3], Model.Datos_Totales_Pre[i, 4], Model.Datos_Totales_Pre[i, 5], Model.Datos_Totales_Pre[i, 6], Model.Datos_Totales_Pre[i, 7], Model.Datos_Totales_Pre[i, 8], Model.Datos_Totales_Pre[i, 9], Model.Datos_Totales_Pre[i, 10], Model.Datos_Totales_Pre[i, 11], Model.Datos_Totales_Pre[i, 12], Model.Datos_Totales_Pre[i, 13], Model.Datos_Totales_Pre[i, 14], Model.Datos_Totales_Pre[i, 15], Model.Datos_Totales_Pre[i, 16], Model.Datos_Totales_Pre[i, 17], Model.Datos_Totales_Pre[i, 18] }).Name(Model.Carriles[i].ToString() + "-Pre").Color("#FA5858");
                                                }
                                            }
                                            else
                                            {
                                                series.Column(new double[] { }).Name(Model.Carriles[0].ToString() + "-Pre").Color("#FA5858");
                                            }
                                            if (Model.Datos_Totales_Post != null)
                                            {
                                                for (int i = 0; i < Model.Carriles.Count; i++)
                                                {
                                                    series.Column(new double[] { Model.Datos_Totales_Post[i, 0], Model.Datos_Totales_Post[i, 1], Model.Datos_Totales_Post[i, 2], Model.Datos_Totales_Post[i, 3], Model.Datos_Totales_Post[i, 4], Model.Datos_Totales_Post[i, 5], Model.Datos_Totales_Post[i, 6], Model.Datos_Totales_Post[i, 7], Model.Datos_Totales_Post[i, 8], Model.Datos_Totales_Post[i, 9], Model.Datos_Totales_Post[i, 10], Model.Datos_Totales_Post[i, 11], Model.Datos_Totales_Post[i, 12], Model.Datos_Totales_Post[i, 13], Model.Datos_Totales_Post[i, 14], Model.Datos_Totales_Post[i, 15], Model.Datos_Totales_Post[i, 16], Model.Datos_Totales_Post[i, 17], Model.Datos_Totales_Post[i, 18] }).Name(Model.Carriles[i].ToString() + "-Post").Color("#2ECCFA");
                                                }
                                            }
                                            else
                                            {
                                                series.Column(new double[] { }).Name(Model.Carriles[0].ToString()+ "-Post").Color("#2ECCFA");
                                            }

                                        })
                                            .CategoryAxis(axis => axis
                                            .Categories("T01A", "T02C", "T03C", "T04C", "T05C", "T06C", "T06C", "T07C", "T08C", "T09C", "TL01A", "TL02A", "T02B", "T03B", "T04B", "T01M", "TPnnC", "TLnnA", "T01T", "T01P")
                                            .MajorGridLines(lines => lines.Visible(true))
                                        )

                                        .ValueAxis(p => p.Numeric("1000"))
                                        .Tooltip(tooltip => tooltip
                                        .Visible(true)
                                        .Format("{0}%")
                                        .Template("#= series.name #: #= value #")
                                        )
    )

    @(Html.Kendo().Chart()
                                    .Name("chart2")
                                    .Title("Discrepancias Turno\n22:00-05:59")
                                    .Legend(legend => legend
                                    .Position(ChartLegendPosition.Left)
                                    )
                                    .ChartArea(chartArea => chartArea
                                    .Background("transparent")
                                    )
                                    //.SeriesDefaults(seriesDefaults =>
                                    //seriesDefaults.Line().Style(ChartLineStyle.Smooth)
                                    //)
                                    .Series(series =>
                                    {

                                        if (Model.Datos_Graficos_Pre_1 != null)
                                        {
                                            for (int i = 0; i < Model.Carriles.Count; i++)
                                            {
                                                series.Column(new double[] { Model.Datos_Graficos_Pre_1[i, 0], Model.Datos_Graficos_Pre_1[i, 1], Model.Datos_Graficos_Pre_1[i, 2], Model.Datos_Graficos_Pre_1[i, 3], Model.Datos_Graficos_Pre_1[i, 4], Model.Datos_Graficos_Pre_1[i, 5], Model.Datos_Graficos_Pre_1[i, 6], Model.Datos_Graficos_Pre_1[i, 7], Model.Datos_Graficos_Pre_1[i, 8], Model.Datos_Graficos_Pre_1[i, 9], Model.Datos_Graficos_Pre_1[i, 10], Model.Datos_Graficos_Pre_1[i, 11], Model.Datos_Graficos_Pre_1[i, 12], Model.Datos_Graficos_Pre_1[i, 13], Model.Datos_Graficos_Pre_1[i, 14], Model.Datos_Graficos_Pre_1[i, 15], Model.Datos_Graficos_Pre_1[i, 16], Model.Datos_Graficos_Pre_1[i, 17], Model.Datos_Graficos_Pre_1[i, 18] }).Name(Model.Carriles[i].ToString() + "-Pre").Color("#FA5858");
                                            }
                                        }
                                        else
                                        {
                                            series.Column(new double[] {  }).Name(Model.Carriles[0].ToString() + "-Pre").Color("#FA5858");
                                        }
                                        if (Model.Datos_Graficos_Post_1 != null)
                                        {
                                            for (int i = 0; i < Model.Carriles.Count; i++)
                                            {
                                                series.Column(new double[] { Model.Datos_Graficos_Post_1[i, 0], Model.Datos_Graficos_Post_1[i, 1], Model.Datos_Graficos_Post_1[i, 2], Model.Datos_Graficos_Post_1[i, 3], Model.Datos_Graficos_Post_1[i, 4], Model.Datos_Graficos_Post_1[i, 5], Model.Datos_Graficos_Post_1[i, 6], Model.Datos_Graficos_Post_1[i, 7], Model.Datos_Graficos_Post_1[i, 8], Model.Datos_Graficos_Post_1[i, 9], Model.Datos_Graficos_Post_1[i, 10], Model.Datos_Graficos_Post_1[i, 11], Model.Datos_Graficos_Post_1[i, 12], Model.Datos_Graficos_Post_1[i, 13], Model.Datos_Graficos_Post_1[i, 14], Model.Datos_Graficos_Post_1[i, 15], Model.Datos_Graficos_Post_1[i, 16], Model.Datos_Graficos_Post_1[i, 17], Model.Datos_Graficos_Post_1[i, 18] }).Name(Model.Carriles[i].ToString() + "-Post").Color("#2ECCFA");
                                            }
                                        }
                                        else
                                        {
                                            series.Column(new double[] {  }).Name(Model.Carriles[0].ToString() + "-Post").Color("#2ECCFA");
                                        }


                                    })
                                        .CategoryAxis(axis => axis
                                        .Categories("T01A", "T02C", "T03C", "T04C", "T05C", "T06C", "T06C", "T07C", "T08C", "T09C", "TL01A", "TL02A", "T02B", "T03B", "T04B", "T01M", "TPnnC", "TLnnA", "T01T", "T01P")
                                        .MajorGridLines(lines => lines.Visible(true))
                                    )
                                    .ValueAxis(p => p.Numeric("1000"))
                                    .Tooltip(tooltip => tooltip
                                    .Visible(true)
                                    .Format("{0}%")
                                    .Template("#= series.name #: #= value #")
                                    )
    )
    @(Html.Kendo().Chart()
                        .Name("chart3")
                        .Title("Discrepancias Turno\n06:00-13:59")
                        .Legend(legend => legend
                        .Position(ChartLegendPosition.Left)
                        )
                        .ChartArea(chartArea => chartArea
                        .Background("transparent")
                        )
                        //.SeriesDefaults(seriesDefaults =>
                        //seriesDefaults.Line().Style(ChartLineStyle.Smooth)
                        //)
                        .Series(series =>
                        {

                            if (Model.Datos_Graficos_Pre_2 != null)
                            {
                                for (int i = 0; i < Model.Carriles.Count; i++)
                                {
                                    series.Column(new double[] { Model.Datos_Graficos_Pre_2[i, 0], Model.Datos_Graficos_Pre_2[i, 1], Model.Datos_Graficos_Pre_2[i, 2], Model.Datos_Graficos_Pre_2[i, 3], Model.Datos_Graficos_Pre_2[i, 4], Model.Datos_Graficos_Pre_2[i, 5], Model.Datos_Graficos_Pre_2[i, 6], Model.Datos_Graficos_Pre_2[i, 7], Model.Datos_Graficos_Pre_2[i, 8], Model.Datos_Graficos_Pre_2[i, 9], Model.Datos_Graficos_Pre_2[i, 10], Model.Datos_Graficos_Pre_2[i, 11], Model.Datos_Graficos_Pre_2[i, 12], Model.Datos_Graficos_Pre_2[i, 13], Model.Datos_Graficos_Pre_2[i, 14], Model.Datos_Graficos_Pre_2[i, 15], Model.Datos_Graficos_Pre_2[i, 16], Model.Datos_Graficos_Pre_2[i, 17], Model.Datos_Graficos_Pre_2[i, 18] }).Name(Model.Carriles[i].ToString() + "-Pre").Color("#FA5858");
                                }
                            }
                            else
                            {
                                series.Column(new double[] { }).Name(Model.Carriles[0].ToString() + "-Pre").Color("#FA5858");
                            }
                            if (Model.Datos_Graficos_Post_2 != null)
                            {
                                for (int i = 0; i < Model.Carriles.Count; i++)
                                {
                                    series.Column(new double[] { Model.Datos_Graficos_Post_2[i, 0], Model.Datos_Graficos_Post_2[i, 1], Model.Datos_Graficos_Post_2[i, 2], Model.Datos_Graficos_Post_2[i, 3], Model.Datos_Graficos_Post_2[i, 4], Model.Datos_Graficos_Post_2[i, 5], Model.Datos_Graficos_Post_2[i, 6], Model.Datos_Graficos_Post_2[i, 7], Model.Datos_Graficos_Post_2[i, 8], Model.Datos_Graficos_Post_2[i, 9], Model.Datos_Graficos_Post_2[i, 10], Model.Datos_Graficos_Post_2[i, 11], Model.Datos_Graficos_Post_2[i, 12], Model.Datos_Graficos_Post_2[i, 13], Model.Datos_Graficos_Post_2[i, 14], Model.Datos_Graficos_Post_2[i, 15], Model.Datos_Graficos_Post_2[i, 16], Model.Datos_Graficos_Post_2[i, 17], Model.Datos_Graficos_Post_2[i, 18] }).Name(Model.Carriles[i].ToString() + "-Post").Color("#2ECCFA");
                                }
                            }
                            else
                            {
                                series.Column(new double[] { }).Name(Model.Carriles[0].ToString() + "-Post").Color("#2ECCFA");
                            }

                        })
                            .CategoryAxis(axis => axis
                            .Categories("T01A", "T02C", "T03C", "T04C", "T05C", "T06C", "T06C", "T07C", "T08C", "T09C", "TL01A", "TL02A", "T02B", "T03B", "T04B", "T01M", "TPnnC", "TLnnA", "T01T", "T01P")
                            .MajorGridLines(lines => lines.Visible(true))
                        )
                        .ValueAxis(p => p.Numeric("1000"))
                        .Tooltip(tooltip => tooltip
                        .Visible(true)
                        .Format("{0}%")
                        .Template("#= series.name #: #= value #")
                        )
    )
    @(Html.Kendo().Chart()
                .Name("chart4")
                .HtmlAttributes(new { style = "margin-bottom: 100px !important;" })
                .Title("Discrepancias Turno\n14:00-21:59")
                .Legend(legend => legend
                .Position(ChartLegendPosition.Left)

                )
                .ChartArea(chartArea => chartArea
                .Background("transparent")
                )
                //.SeriesDefaults(seriesDefaults =>
                //seriesDefaults.Line().Style(ChartLineStyle.Smooth)
                //)
                .Series(series =>
                {


                    if (Model.Datos_Graficos_Pre_3 != null)
                    {
                        for (int i = 0; i < Model.Carriles.Count; i++)
                        {
                            series.Column(new double[] { Model.Datos_Graficos_Pre_3[i, 0], Model.Datos_Graficos_Pre_3[i, 1], Model.Datos_Graficos_Pre_3[i, 2], Model.Datos_Graficos_Pre_3[i, 3], Model.Datos_Graficos_Pre_3[i, 4], Model.Datos_Graficos_Pre_3[i, 5], Model.Datos_Graficos_Pre_3[i, 6], Model.Datos_Graficos_Pre_3[i, 7], Model.Datos_Graficos_Pre_3[i, 8], Model.Datos_Graficos_Pre_3[i, 9], Model.Datos_Graficos_Pre_3[i, 10], Model.Datos_Graficos_Pre_3[i, 11], Model.Datos_Graficos_Pre_3[i, 12], Model.Datos_Graficos_Pre_3[i, 13], Model.Datos_Graficos_Pre_3[i, 14], Model.Datos_Graficos_Pre_3[i, 15], Model.Datos_Graficos_Pre_3[i, 16], Model.Datos_Graficos_Pre_3[i, 17], Model.Datos_Graficos_Pre_3[i, 18] }).Name(Model.Carriles[i].ToString() + "-Pre").Color("#FA5858");
                        }
                    }
                    else
                    {
                        series.Column(new double[] { }).Name(Model.Carriles[0].ToString() + "-Pre").Color("#FA5858");
                    }
                    if (Model.Datos_Graficos_Post_3 != null)
                    {
                        for (int i = 0; i < Model.Carriles.Count; i++)
                        {
                            series.Column(new double[] { Model.Datos_Graficos_Post_3[i, 0], Model.Datos_Graficos_Post_3[i, 1], Model.Datos_Graficos_Post_3[i, 2], Model.Datos_Graficos_Post_3[i, 3], Model.Datos_Graficos_Post_3[i, 4], Model.Datos_Graficos_Post_3[i, 5], Model.Datos_Graficos_Post_3[i, 6], Model.Datos_Graficos_Post_3[i, 7], Model.Datos_Graficos_Post_3[i, 8], Model.Datos_Graficos_Post_3[i, 9], Model.Datos_Graficos_Post_3[i, 10], Model.Datos_Graficos_Post_3[i, 11], Model.Datos_Graficos_Post_3[i, 12], Model.Datos_Graficos_Post_3[i, 13], Model.Datos_Graficos_Post_3[i, 14], Model.Datos_Graficos_Post_3[i, 15], Model.Datos_Graficos_Post_3[i, 16], Model.Datos_Graficos_Post_3[i, 17], Model.Datos_Graficos_Post_3[i, 18] }).Name(Model.Carriles[i].ToString() + "-Post").Color("#2ECCFA");
                        }
                    }
                    else
                    {
                        series.Column(new double[] { }).Name(Model.Carriles[0].ToString() + "-Post").Color("#2ECCFA");
                    }
                })
                    .CategoryAxis(axis => axis
                    .Categories("T01A", "T02C", "T03C", "T04C", "T05C", "T06C", "T06C", "T07C", "T08C", "T09C", "TL01A", "TL02A", "T02B", "T03B", "T04B", "T01M", "TPnnC", "TLnnA", "T01T", "T01P")
                    .MajorGridLines(lines => lines.Visible(true))
                )
                .ValueAxis(values => values.Numeric("1000"))
                .Tooltip(tooltip => tooltip
                .Visible(true)
                .Format("{0}%")
                .Template("#= series.name #: #= value #")
                )
    )

</div>